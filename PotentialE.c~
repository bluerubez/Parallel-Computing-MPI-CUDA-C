#include<math.h>
#include<stdio.h>

main(){


int i,j,iter,m,n,x,y;
double ax,ay,dt,t,vx,vy,qe,me,xpos,ypos;
double U[200][200]={0}; //create 200 by 200 matrix for
double temp[200][200]={0};//create a temp matrix to aid in filling in
double FFx[200][200]={0};
double FFy[200][200]={0};



for(i=0;i<=119;i++){
temp[i+40][70]=1;}

//set boundries

for(j=0;j<=119;j++){
temp[j+40][130]=2;}

for(iter=0;iter<1000;iter++){ //loop through the columns and rows
	for(y=0;y<=199;y++){
		for(x=0;x<=199;x++){
			switch((int)temp[x][y]){ //had to put a cast bc switch only takes ints
			case 0:
			U[x][y]=.25*(U[x+1][y]+U[x-1][y]+U[x][y+1]+U[x][y-1]); //perform relaxation method on the matrix
			break;
			case 1:
			U[x][y]=1.0; //if on the parallel plates then keep them at one mag
			break;
			case 2:
			U[x][y]=-1.0;
			break;
			}
		}
	}
}

for(m = 0; m < 199; m++) { //print the matrix in matrix form
	for( n = 0; n < 199; n++) {
		printf("%lf ", U[m][n]);}
	printf("\n");
}
printf("\n");

FILE*file1=fopen("ForceField","w");//open up a file to save //////information in column form

me=9.109E-31;qe=-1.602E-19;
dt=0.00001;
x=40;y=80;xpos=40;ypos=80,vx=0,vy=0;//i set these individually for each location

while(x<200 && x>0 && y<200 && y>0){//while in the grid

	FFx[y][x]=(U[y][x+1]-U[y][x-1])*.5; //compute vector components
	FFy[y][x]=(U[y+1][x]-U[y-1][x])*.5;

	ax=-FFx[y][x]*qe/me;//then at that location compute acceleration
	ay=-FFy[y][x]*qe/me;
	
	vx=vx+ax*dt; //then at that location walk through time
	vy=vy+ay*dt; //and find velocity

	xpos=xpos+vx*dt;//then walk through position, but just where electron is
	ypos=ypos+vy*dt;

	t=t+dt;

	x=(int)xpos;
	y=(int)ypos;

	//cast bc matrix index

	fprintf(file1,"%lf %lf %lf %lf %lf %lf %lf \n",t,xpos,ypos,vx,vy,ax,ay); //print in ForceField
	}
	fclose(file1);
}

